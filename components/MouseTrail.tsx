'use client'
import React,{useEffect,useRef}from'react'
export default function MouseTrail(){const c=useRef<HTMLCanvasElement|null>(null);useEffect(()=>{if(window.matchMedia('(prefers-reduced-motion: reduce)').matches)return;const a=c.current!,x=a.getContext('2d')!;let w=a.width=window.innerWidth,h=a.height=window.innerHeight;const D=Math.min(window.devicePixelRatio||1,2);a.width=w*D;a.height=h*D;x.scale(D,D);const p=[] as {x:number;y:number;life:number}[];const add=(x0:number,y0:number)=>{for(let i=0;i<6;i++)p.push({x:x0+(Math.random()-.5)*6,y:y0+(Math.random()-.5)*6,life:1})};const onM=(e:MouseEvent)=>add(e.clientX,e.clientY);window.addEventListener('mousemove',onM);let f=0;const draw=()=>{x.clearRect(0,0,w,h);for(const s of p){x.beginPath();x.arc(s.x,s.y,2,0,Math.PI*2);x.fillStyle=`rgba(56,189,248,${s.life})`;x.fill();s.y-=.3;s.life-=.02}for(let i=p.length-1;i>=0;i--)if(p[i].life<=0)p.splice(i,1);f=requestAnimationFrame(draw)};draw();const onR=()=>{w=a.width=window.innerWidth;h=a.height=window.innerHeight};window.addEventListener('resize',onR);return()=>{cancelAnimationFrame(f);window.removeEventListener('mousemove',onM);window.removeEventListener('resize',onR)}},[]);return <canvas ref={c} className='pointer-events-none fixed inset-0 -z-10'/>}
